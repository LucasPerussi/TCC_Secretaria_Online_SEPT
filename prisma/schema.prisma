generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model campos_solicitacao {
  id                 Int                  @id @default(autoincrement())
  tipo               Int
  nome               String               @db.VarChar(255)
  nome_exibicao      String               @db.VarChar(255)
  tipo_processo      Int
  tipos_campos       tipos_campos         @relation(fields: [tipo], references: [id], onUpdate: Restrict, map: "campos_solicitacao_ibfk_1")
  tipo_solicitacao   tipo_solicitacao     @relation(fields: [tipo_processo], references: [id], onUpdate: Restrict, map: "campos_solicitacao_ibfk_2")
  opcoes_de_campos   opcoes_de_campos[]
  respostas_processo respostas_processo[]

  @@index([tipo], map: "tipo")
  @@index([tipo_processo], map: "tipo_processo")
}

model codigos {
  id                               Int      @id @default(autoincrement())
  codigo                           String   @db.VarChar(60)
  data_solicitacao                 DateTime @db.DateTime(0)
  usuario                          Int
  status                           Int
  usuario_codigos_usuarioTousuario usuario  @relation("codigos_usuarioTousuario", fields: [usuario], references: [id], onUpdate: Restrict, map: "codigos_ibfk_1")

  @@index([usuario], map: "usuario")
}

model comentarios {
  id                                      Int      @id @default(autoincrement())
  processo                                Int
  usuario                                 Int
  comentario                              String   @db.VarChar(255)
  data                                    DateTime @db.DateTime(0)
  processo_comentarios_processoToprocesso processo @relation("comentarios_processoToprocesso", fields: [processo], references: [id], onUpdate: Restrict, map: "comentarios_ibfk_1")
  usuario_comentarios_usuarioTousuario    usuario  @relation("comentarios_usuarioTousuario", fields: [usuario], references: [id], onUpdate: Restrict, map: "comentarios_ibfk_2")

  @@index([processo], map: "processo")
  @@index([usuario], map: "usuario")
}

model curso {
  id                                 Int       @id @default(autoincrement())
  nome                               String    @db.VarChar(255)
  descricao                          String    @db.VarChar(255)
  coordenador                        Int
  criado_em                          DateTime  @default(now()) @db.DateTime(0)
  identificador                      String    @unique(map: "identificador") @db.VarChar(10)
  horas_formativas                   Int?
  semestres                          Int?
  usuario_curso_coordenadorTousuario usuario   @relation("curso_coordenadorTousuario", fields: [coordenador], references: [id], onUpdate: Restrict, map: "curso_fk_coordenador")
  mural                              mural[]
  usuario_usuario_cursoTocurso       usuario[] @relation("usuario_cursoTocurso")

  @@index([coordenador], map: "curso_fk_coordenador")
}

model empresas {
  id            Int       @id @default(autoincrement())
  nome          String    @db.VarChar(100)
  cnpj          String?   @unique(map: "cnpj") @db.VarChar(20)
  email_contato String?   @db.VarChar(255)
  tipo          Int       @default(99)
  estagio       estagio[]
}

model enum_etapas {
  id              Int    @id @default(autoincrement())
  nome            String @default("50") @db.VarChar(255)
  label           String @default("100") @db.VarChar(255)
  padrao          Int    @default(1)
  estimativaHoras Int    @default(24)
  cor             String @default("#1E90FF") @db.VarChar(10)
}

model estagio {
  id                                            Int      @id @default(autoincrement())
  aluno                                         Int
  professor_orientador                          Int
  codigo_estagio                                Int
  empresa                                       Int
  area_atuacao                                  String   @db.VarChar(100)
  data_inicio                                   DateTime @db.Date
  data_renovacao                                DateTime @db.Date
  documentos_referencia                         String?  @db.Text
  status                                        Int      @default(1)
  usuario_estagio_alunoTousuario                usuario  @relation("estagio_alunoTousuario", fields: [aluno], references: [id], onUpdate: Restrict, map: "estagio_ibfk_1")
  usuario_estagio_professor_orientadorTousuario usuario  @relation("estagio_professor_orientadorTousuario", fields: [professor_orientador], references: [id], onUpdate: Restrict, map: "estagio_ibfk_2")
  empresas                                      empresas @relation(fields: [empresa], references: [id], onUpdate: Restrict, map: "estagio_ibfk_3")

  @@index([aluno], map: "aluno")
  @@index([empresa], map: "empresa")
  @@index([professor_orientador], map: "professor_orientador")
}

model etapas_processo {
  id             Int        @id @default(autoincrement())
  tipo           Int
  obrigatorio    Int        @default(1)
  proccessTypeId Int
  ordem          Int?
  processo       processo[]

  @@index([tipo], map: "tipo")
}

model fila_emails {
  id            Int      @id @default(autoincrement())
  identificador String   @db.VarChar(15)
  destinatario  String   @db.VarChar(255)
  titulo        String   @db.VarChar(100)
  operacao      Int
  corpo         String   @db.Text
  status        String   @default("1") @db.VarChar(3)
  data          DateTime @default(now()) @db.DateTime(0)
  usuario       Int?
  sensivel      Int      @default(1)
}

model horas_formativas {
  id                                                   Int      @id @default(autoincrement())
  aluno                                                Int
  servidor_avaliador                                   Int?
  data_envio                                           DateTime @db.DateTime(0)
  data_evento                                          DateTime @db.Date
  descricao                                            String?  @db.VarChar(255)
  tipo                                                 Int
  status_aprovacao                                     Int      @default(1)
  comprovante                                          String?  @db.Text
  horas_solicitadas                                    Float
  horas_concedidas                                     Float?
  usuario_horas_formativas_alunoTousuario              usuario  @relation("horas_formativas_alunoTousuario", fields: [aluno], references: [id], onUpdate: Restrict, map: "horas_formativas_ibfk_1")
  usuario_horas_formativas_servidor_avaliadorTousuario usuario? @relation("horas_formativas_servidor_avaliadorTousuario", fields: [servidor_avaliador], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "horas_formativas_ibfk_2")

  @@index([aluno], map: "aluno")
  @@index([servidor_avaliador], map: "servidor_avaliador")
}

model logins {
  id                              Int      @id @default(autoincrement())
  usuario                         Int
  data                            DateTime @db.DateTime(0)
  local                           String   @db.VarChar(100)
  chave_sessao                    String   @db.VarChar(60)
  status                          Int      @default(1)
  ip                              String?  @db.VarChar(255)
  usuario_logins_usuarioTousuario usuario  @relation("logins_usuarioTousuario", fields: [usuario], references: [id], onUpdate: Restrict, map: "logins_ibfk_1")

  @@index([usuario], map: "usuario")
}

model logs {
  id                            Int      @id @default(autoincrement())
  funcao                        String   @db.VarChar(50)
  mensagem                      String   @db.VarChar(255)
  usuario                       Int?
  status                        String   @db.VarChar(20)
  data                          DateTime @default(now()) @db.DateTime(0)
  usuario_logs_usuarioTousuario usuario? @relation("logs_usuarioTousuario", fields: [usuario], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "logs_ibfk_1")

  @@index([usuario], map: "usuario")
}

model mural {
  id            Int      @id @default(autoincrement())
  titulo        String   @db.VarChar(100)
  descricao     String   @db.Text
  identificador String   @db.VarChar(50)
  autor         Int
  data          DateTime @default(now()) @db.DateTime(0)
  curso_alvo    Int
  visivel       Int      @default(1)
  usuario       usuario  @relation(fields: [autor], references: [id], onUpdate: Restrict, map: "mural_ibfk_1")
  curso         curso    @relation(fields: [curso_alvo], references: [id], onUpdate: Restrict, map: "mural_ibfk_2")

  @@index([autor], map: "autor")
  @@index([curso_alvo], map: "curso_alvo")
}

model opcoes_de_campos {
  id                 Int                @id @default(autoincrement())
  nome               String             @db.VarChar(255)
  label              String             @db.VarChar(255)
  tipo               Int
  campo_pai          Int
  tipos_campos       tipos_campos       @relation(fields: [tipo], references: [id], onUpdate: Restrict, map: "opcoes_de_campos_ibfk_1")
  campos_solicitacao campos_solicitacao @relation(fields: [campo_pai], references: [id], onUpdate: Restrict, map: "opcoes_de_campos_ibfk_2")

  @@index([campo_pai], map: "campo_pai")
  @@index([tipo], map: "tipo")
}

model processo {
  id                                                           Int                  @id @default(autoincrement())
  titulo                                                       String               @db.VarChar(100)
  descricao                                                    String               @db.VarChar(255)
  identificador                                                String               @unique(map: "identificador") @db.VarChar(60)
  aluno                                                        Int
  data_abertura                                                DateTime             @db.DateTime(0)
  servidor_responsavel                                         Int?
  professor_avaliador                                          Int?
  status                                                       Int                  @default(1)
  justificativa_conclusao                                      String?              @db.VarChar(255)
  data_limite_resolucao                                        DateTime?            @db.DateTime(0)
  tipo_solicitacao                                             Int
  etapa_atual                                                  Int
  numero                                                       Int                  @unique(map: "numero")
  comentarios_comentarios_processoToprocesso                   comentarios[]        @relation("comentarios_processoToprocesso")
  usuario_processo_alunoTousuario                              usuario              @relation("processo_alunoTousuario", fields: [aluno], references: [id], onUpdate: Restrict, map: "processo_ibfk_1")
  usuario_processo_servidor_responsavelTousuario               usuario?             @relation("processo_servidor_responsavelTousuario", fields: [servidor_responsavel], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "processo_ibfk_2")
  usuario_processo_professor_avaliadorTousuario                usuario?             @relation("processo_professor_avaliadorTousuario", fields: [professor_avaliador], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "processo_ibfk_3")
  tipo_solicitacao_processo_tipo_solicitacaoTotipo_solicitacao tipo_solicitacao     @relation("processo_tipo_solicitacaoTotipo_solicitacao", fields: [tipo_solicitacao], references: [id], onUpdate: Restrict, map: "processo_ibfk_4")
  etapas_processo                                              etapas_processo      @relation(fields: [etapa_atual], references: [id], onUpdate: Restrict, map: "processo_ibfk_5")
  respostas_processo_respostas_processo_processoToprocesso     respostas_processo[] @relation("respostas_processo_processoToprocesso")

  @@index([aluno], map: "aluno")
  @@index([etapa_atual], map: "etapa_atual")
  @@index([professor_avaliador], map: "professor_avaliador")
  @@index([servidor_responsavel], map: "servidor_responsavel")
  @@index([tipo_solicitacao], map: "tipo_solicitacao")
}

model respostas_processo {
  id                                             Int                @id @default(autoincrement())
  processo                                       Int
  campo                                          Int
  resposta                                       String             @db.VarChar(255)
  usuario                                        Int
  processo_respostas_processo_processoToprocesso processo           @relation("respostas_processo_processoToprocesso", fields: [processo], references: [id], onUpdate: Restrict, map: "respostas_processo_ibfk_1")
  campos_solicitacao                             campos_solicitacao @relation(fields: [campo], references: [id], onUpdate: Restrict, map: "respostas_processo_ibfk_2")
  usuario_respostas_processo_usuarioTousuario    usuario            @relation("respostas_processo_usuarioTousuario", fields: [usuario], references: [id], onUpdate: Restrict, map: "respostas_processo_ibfk_3")

  @@index([campo], map: "campo")
  @@index([processo], map: "processo")
  @@index([usuario], map: "usuario")
}

model tentativas_login {
  id                                        Int      @id @default(autoincrement())
  usuario                                   Int
  data_tentativa                            DateTime @db.DateTime(0)
  ip                                        String?  @db.VarChar(255)
  status                                    String   @db.VarChar(50)
  usuario_tentativas_login_usuarioTousuario usuario  @relation("tentativas_login_usuarioTousuario", fields: [usuario], references: [id], onUpdate: Restrict, map: "tentativas_login_ibfk_1")

  @@index([usuario], map: "usuario")
}

model timelines {
  id                                 Int      @id @default(autoincrement())
  usuario                            Int
  referencia                         String   @db.VarChar(60)
  titulo                             String   @db.VarChar(100)
  descricao                          String   @db.VarChar(255)
  tipo                               Int
  data                               DateTime @default(now()) @db.DateTime(0)
  usuario_timelines_usuarioTousuario usuario  @relation("timelines_usuarioTousuario", fields: [usuario], references: [id], onUpdate: Restrict, map: "timelines_ibfk_1")

  @@index([usuario], map: "usuario")
}

model tipo_solicitacao {
  id                                                   Int                  @id @default(autoincrement())
  nome                                                 String               @db.VarChar(100)
  fluxograma                                           String               @db.VarChar(255)
  hrs_resposta                                         Int?
  hrs_resolucao                                        Int?
  campos_solicitacao                                   campos_solicitacao[]
  processo_processo_tipo_solicitacaoTotipo_solicitacao processo[]           @relation("processo_tipo_solicitacaoTotipo_solicitacao")
}

model tipos_campos {
  id                 Int                  @id @default(autoincrement())
  nome               String               @db.VarChar(100)
  etiqueta           String               @db.VarChar(255)
  obrigatorio        Int                  @default(1)
  tipo_dado          Int
  campo_padrao       Int                  @default(1)
  campos_solicitacao campos_solicitacao[]
  opcoes_de_campos   opcoes_de_campos[]
}

model usuario {
  id                                                            Int                  @id @default(autoincrement())
  email                                                         String               @unique(map: "email") @db.VarChar(255)
  senha                                                         String               @db.VarChar(255)
  registro                                                      String               @unique(map: "registro") @db.VarChar(15)
  nome                                                          String               @db.VarChar(40)
  sobrenome                                                     String               @db.VarChar(70)
  nascimento                                                    DateTime             @db.Date
  criado_em                                                     DateTime             @db.DateTime(0)
  funcao                                                        Int                  @default(1)
  foto                                                          String               @db.VarChar(255)
  status_usuario                                                Int                  @default(1)
  curso                                                         Int?
  status_curso                                                  Int                  @default(1)
  codigos_codigos_usuarioTousuario                              codigos[]            @relation("codigos_usuarioTousuario")
  comentarios_comentarios_usuarioTousuario                      comentarios[]        @relation("comentarios_usuarioTousuario")
  curso_curso_coordenadorTousuario                              curso[]              @relation("curso_coordenadorTousuario")
  estagio_estagio_alunoTousuario                                estagio[]            @relation("estagio_alunoTousuario")
  estagio_estagio_professor_orientadorTousuario                 estagio[]            @relation("estagio_professor_orientadorTousuario")
  horas_formativas_horas_formativas_alunoTousuario              horas_formativas[]   @relation("horas_formativas_alunoTousuario")
  horas_formativas_horas_formativas_servidor_avaliadorTousuario horas_formativas[]   @relation("horas_formativas_servidor_avaliadorTousuario")
  logins_logins_usuarioTousuario                                logins[]             @relation("logins_usuarioTousuario")
  logs_logs_usuarioTousuario                                    logs[]               @relation("logs_usuarioTousuario")
  mural                                                         mural[]
  processo_processo_alunoTousuario                              processo[]           @relation("processo_alunoTousuario")
  processo_processo_servidor_responsavelTousuario               processo[]           @relation("processo_servidor_responsavelTousuario")
  processo_processo_professor_avaliadorTousuario                processo[]           @relation("processo_professor_avaliadorTousuario")
  respostas_processo_respostas_processo_usuarioTousuario        respostas_processo[] @relation("respostas_processo_usuarioTousuario")
  tentativas_login_tentativas_login_usuarioTousuario            tentativas_login[]   @relation("tentativas_login_usuarioTousuario")
  timelines_timelines_usuarioTousuario                          timelines[]          @relation("timelines_usuarioTousuario")
  curso_usuario_cursoTocurso                                    curso?               @relation("usuario_cursoTocurso", fields: [curso], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "usuario_fk_curso")

  @@index([curso], map: "usuario_fk_curso")
}
